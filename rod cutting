// User function Template for C++

//TABULATION-space optimisation
class Solution {
  public:
    int cutRod(vector<int> &price) {
        int n=price.size();
        vector<int>dp (n+1,0);
        for(int i=0;i<=n;i++){
            dp[i]=i*price[0];
        }
        for(int index=1;index<n;index++){
            vector<int>temp (n+1,0);
            for(int len=1;len<=n;len++){
                int notpick=dp[len];
                int pick=0;
                if(index+1<=len) pick=price[index]+temp[len-index-1];
               temp[len]=max(pick,notpick);
            }
            dp=temp;
        }
        return dp[n];
    }
};

//TABULATION
// class Solution {
//   public:
//     int cutRod(vector<int> &price) {
//         int n=price.size();
//         vector<vector<int>> dp(n,vector<int>(n+1,0));
//         for(int i=0;i<=n;i++){
//             dp[0][i]=i*price[0];
//         }
//         for(int index=1;index<n;index++){
//             for(int len=1;len<=n;len++){
//                 int notpick=dp[index-1][len];
//                 int pick=0;
//                 if(index+1<=len) pick=price[index]+dp[index][len-index-1];
//               dp[index][len]=max(pick,notpick);
//             }
//         }
//         return dp[n-1][n];
//     }
// };
    
//MEMOIZATION
// class Solution {
//   public:
//     int cutRod(vector<int> &price) {
//         int n=price.size();
//         vector<vector<int>> dp(n,vector<int>(n+1,-1));
//         return func(n-1,n,price,dp);
//     }
//     int func(int index,int len,vector<int> &price,vector<vector<int>>& dp){
//         //base case
//         if(len<=0) return 0;
//         if(index==0){
//             return (len)*price[0];
//         }
//         if(dp[index][len]!=-1) return dp[index][len];
//         //conditions
//         int notpick=func(index-1,len,price,dp);
//         int pick=0;
//         if(index+1<=len) pick=price[index]+func(index,len-index-1,price,dp);
//         return dp[index][len]=max(pick,notpick);
//     }};
    
//RECURSION
//     class Solution {
//   public:
//     int cutRod(vector<int> &price) {
//         int n=price.size();
//         return func(n-1,n,price);
//     }
//     int func(int index,int len,vector<int> &price){
//         //base case
//         if(len<=0) return 0;
//         if(index==0){
//             return (len)*price[0];
//         }
//         //conditions
//         int notpick=func(index-1,len,price);
//         int pick=0;
//         if(index+1<=len) pick=price[index]+func(index,len-index-1,price);
//         return max(pick,notpick);
//     }};
