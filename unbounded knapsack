// User function Template for C++

//SPACE OPTIMIZATION
class Solution {
  public:
    int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
        int n=val.size();
        vector<int> dp(capacity+1,0);
        for(int i=0;i<=capacity;i++){
            dp[i]= (i/wt[0])*val[0];
        }
        for(int ind=1;ind<n;ind++){
            vector<int> temp(capacity+1,0);
            for(int currwt=0;currwt<=capacity;currwt++){
              int pick=0;
              if(wt[ind]<=currwt)pick=val[ind]+ temp[currwt-wt[ind]];
              int nottpick=dp[currwt];
              temp[currwt]=max(pick,nottpick);                
            }
            dp=temp;
        }
        return dp[capacity];
    }
};

//TABULATION
// class Solution {
//   public:
//     int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
//         int n=val.size();
//         vector<vector<int>> dp(val.size(),vector<int>(capacity+1,-1));
//         for(int i=0;i<=capacity;i++){
//             dp[0][i]= (i/wt[0])*val[0];
//         }
//         for(int ind=1;ind<n;ind++){
//             for(int currwt=0;currwt<=capacity;currwt++){
//         int pick=0;
//         if(wt[ind]<=currwt)pick=val[ind]+ dp[ind][currwt-wt[ind]];
//         int nottpick=dp[ind-1][currwt];
//         dp[ind][currwt]=max(pick,nottpick);                
//             }
//         }
//         return dp[n-1][capacity];
//     }
// };


//MEMOIZATION
// class Solution {
//   public:
//     int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
//         vector<vector<int>> dp(val.size(),vector<int>(capacity+1,-1));
//         return func(val.size()-1,capacity,val,wt,dp);
//     }
//     int func(int ind,int currwt,vector<int>& val, vector<int>& wt,vector<vector<int>>& dp){
//         if(currwt<=0)return 0;
//         if(ind==0){
//             return (currwt/wt[ind])*val[ind];
//         }
//         int pick=0;
        
//         if(dp[ind][currwt]!=-1) return dp[ind][currwt];
//         if(wt[ind]<=currwt)pick=val[ind]+func(ind,currwt-wt[ind],val,wt,dp);
//         int nottpick=func(ind-1,currwt,val,wt,dp);
//         return dp[ind][currwt]=max(pick,nottpick);
//     }
// };


//RECURSIVE
// class Solution {
//   public:
//     int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
//         return func(val.size()-1,capacity,val,wt);
//     }
//     int func(int ind,int currwt,vector<int>& val, vector<int>& wt){
//         if(currwt<=0)return 0;
//         if(ind==0){
//             return (currwt/wt[ind])*val[ind];
//         }
//         int pick=0;
//         if(wt[ind]<=currwt)pick=val[ind]+func(ind,currwt-wt[ind],val,wt);
//         int nottpick=func(ind-1,currwt,val,wt);
//         return max(pick,nottpick);
//     }
// };
